{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\moon-active\\\\client-side\\\\src\\\\components\\\\promotionsList.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PromotionTable from './promotionsTable';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // import { environment } from '../react-app-env.env';\n\nexport const PromotionsList = () => {\n  const [promotions, setPromotions] = useState([]);\n  const [promotionKeys, setPromotionKeys] = useState([]);\n  const [hasMoreData, setHasMoreData] = useState(true);\n  const limit = 20;\n  const url = 'http://localhost:4000/promotion';\n  const maxRows = limit * 3;\n  useEffect(() => {\n    initializeData();\n  }, []);\n\n  const initializeData = async () => {\n    await getPromotionKeys();\n    await getPromotions(0);\n  };\n\n  const getPromotionKeys = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(`${url}/keys`);\n      setPromotionKeys(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getPromotions = async page => {\n    await axios.post(`${url}/page`, {\n      page,\n      limit\n    }).then(({\n      data\n    }) => {\n      initializePromotions(data, limit, setHasMoreData, maxRows, promotions, setPromotions);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const deletePromotions = async ids => {\n    axios.delete(url, {\n      data: ids\n    }).then(({\n      data\n    }) => {\n      initializePromotions(data, limit, setHasMoreData, maxRows, promotions, setPromotions);\n    }).catch(err => {\n      console.log(err);\n    });\n    debugger;\n\n    try {\n      await axios.delete(url, {\n        data: ids\n      });\n      setPromotions([...promotions.filter(({\n        _id\n      }) => ids.indexOf(_id) > -1)]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updatePromotion = async promotions => {\n    try {\n      const {\n        data\n      } = await axios.post(url, {}); // setPromotions(promotions => [...promotions, ...data]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const createPromotion = async promotion => {\n    try {\n      await axios.post(url, {\n        promotion\n      }); // setPromotions(promotions => [...promotions, ...data]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const editPromotion = promotion => {\n    setPromotions([...promotions.map(p => {\n      if (p._id == promotion._id) return promotion;\n      return p;\n    })]);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    direction: \"column\",\n    alignItems: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"promotions-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: getPromotions,\n    hasMore: hasMoreData,\n    initialLoad: false,\n    loader: /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      key: 'load',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }),\n    useWindow: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PromotionTable, {\n    data: {\n      promotionKeys,\n      promotions\n    },\n    onDelete: deletePromotions,\n    onSave: updatePromotion,\n    onDuplicate: createPromotion,\n    onEdit: editPromotion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  })))));\n};\n\nfunction initializePromotions(data, limit, setHasMoreData, maxRows, promotions, setPromotions) {\n  const hasMore = data.length && data.length == limit ? true : false;\n  setHasMoreData(hasMore);\n  const slice = maxRows - promotions.length;\n  const excessRows = slice < data.length ? data.length - slice : 0;\n  const newPromotions = [...promotions.slice(excessRows)];\n  setPromotions(promotions => [...newPromotions, ...data]);\n}","map":{"version":3,"sources":["C:/Projects/moon-active/client-side/src/components/promotionsList.tsx"],"names":["React","useState","useEffect","axios","PromotionTable","InfiniteScroll","Grid","CircularProgress","PromotionsList","promotions","setPromotions","promotionKeys","setPromotionKeys","hasMoreData","setHasMoreData","limit","url","maxRows","initializeData","getPromotionKeys","getPromotions","data","get","error","console","log","page","post","then","initializePromotions","catch","err","deletePromotions","ids","delete","filter","_id","indexOf","updatePromotion","createPromotion","promotion","editPromotion","map","p","hasMore","length","slice","excessRows","newPromotions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport PromotionTable from './promotionsTable';\r\nimport { promotion } from '../types/promotion';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport moment from 'moment'\r\nimport { Grid } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n// import { environment } from '../react-app-env.env';\r\n\r\nexport interface promotionData {\r\n    promotionKeys: string[];\r\n    promotions: any[];\r\n}\r\n\r\nexport interface TableProps {\r\n    data: promotionData;\r\n    onDelete: any;\r\n    onDuplicate: any;\r\n    onEdit: any;\r\n    onSave: any;\r\n}\r\n\r\nexport const PromotionsList = () => {\r\n\r\n    const [promotions, setPromotions] = useState<promotion[]>([]);\r\n    const [promotionKeys, setPromotionKeys] = useState<string[]>([]);\r\n    const [hasMoreData, setHasMoreData] = useState<boolean>(true);\r\n    const limit = 20;\r\n    const url = 'http://localhost:4000/promotion';\r\n    const maxRows = limit * 3;\r\n\r\n    useEffect(() => {\r\n        initializeData();\r\n    }, []);\r\n\r\n    const initializeData = async () => {\r\n        await getPromotionKeys();\r\n        await getPromotions(0);\r\n    }\r\n\r\n    const getPromotionKeys = async () => {\r\n        try {\r\n            const { data } = await axios.get<string[]>(`${url}/keys`);\r\n            setPromotionKeys(data);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getPromotions = async (page: number) => {\r\n        await axios.post<any[]>(`${url}/page`, {\r\n            page, limit\r\n        }).then(({ data }: AxiosResponse) => {\r\n            initializePromotions(data, limit, setHasMoreData, maxRows, promotions, setPromotions);\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const deletePromotions = async (ids: string[]) => {\r\n\r\n        axios.delete<any>(url, { data: ids }).then(({ data }: AxiosResponse) => {\r\n            initializePromotions(data, limit, setHasMoreData, maxRows, promotions, setPromotions);\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        })\r\n\r\n\r\n\r\n\r\n        debugger\r\n        try {\r\n            await axios.delete<any>(url, { data: ids });\r\n            setPromotions([...promotions.filter(({ _id }) => ids.indexOf(_id) > -1)]);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const updatePromotion = async (promotions: promotion[]) => {\r\n        try {\r\n            const { data } = await axios.post<promotion[]>(url, {\r\n            });\r\n            // setPromotions(promotions => [...promotions, ...data]);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const createPromotion = async (promotion: promotion) => {\r\n        try {\r\n            await axios.post<promotion[]>(url, {\r\n                promotion\r\n            });\r\n            // setPromotions(promotions => [...promotions, ...data]);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const editPromotion = (promotion: any) => {\r\n        setPromotions([...promotions.map((p) => {\r\n            if (p._id == promotion._id) return promotion\r\n            return p;\r\n        })])\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\">\r\n            <Grid item xs={10}>\r\n                <div className=\"promotions-list\">\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={getPromotions}\r\n                        hasMore={hasMoreData}\r\n                        initialLoad={false}\r\n                        loader={<CircularProgress color=\"secondary\" key={'load'} />}\r\n                        useWindow={false}>\r\n                        <PromotionTable data={{ promotionKeys, promotions }} onDelete={deletePromotions}\r\n                            onSave={updatePromotion} onDuplicate={createPromotion} onEdit={editPromotion} />\r\n                    </InfiniteScroll>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nfunction initializePromotions(data: any, limit: number, setHasMoreData: React.Dispatch<React.SetStateAction<boolean>>, maxRows: number, promotions: promotion[], setPromotions: React.Dispatch<React.SetStateAction<promotion[]>>) {\r\n    const hasMore: boolean = (data.length && data.length == limit) ? true : false;\r\n    setHasMoreData(hasMore);\r\n    const slice = maxRows - promotions.length;\r\n    const excessRows = slice < data.length ? data.length - slice : 0;\r\n    const newPromotions = [...promotions.slice(excessRows)];\r\n    setPromotions(promotions => [...newPromotions, ...data]);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}