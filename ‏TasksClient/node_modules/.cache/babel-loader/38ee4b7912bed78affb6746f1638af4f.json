{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\PropitTasks\\\\\\u200FTasksClient\\\\src\\\\components\\\\promotionsList.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport PromotionTable from './promotionsTable';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Api from '../api/apiManager';\nexport const PromotionsList = () => {\n  const [promotions, setPromotions] = useState([]);\n  useEffect(() => {\n    initializeData();\n  }, []);\n\n  const initializeData = async () => {\n    await getPromotions();\n  };\n\n  const getPromotions = async () => {\n    Api.getPromotions().then(({\n      data\n    }) => {\n      setPromotionsData();\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const setPromotionsData = (data, page) => {\n    const hasMore = data.length && data.length === limit ? true : false;\n    setHasMoreData(hasMore);\n    const excessRows = page > maxPage ? data.length - 10 : 0;\n    const newPromotions = [...promotions.slice(excessRows)];\n    setPromotions(promotions => [...newPromotions, ...data]);\n  };\n\n  const deletePromotions = async ids => {\n    setPromotions(promotions => [...promotions.filter(({\n      _id\n    }) => ids.indexOf(_id) === -1)]);\n    await Api.deletePromotions(ids);\n  };\n\n  const updatePromotion = async promotion => {\n    await Api.updatePromotion(promotion);\n  };\n\n  const duplicatePromotion = async promotion => {\n    Api.duplicatePromotion(promotion).then(({\n      data\n    }) => {\n      const index = promotions.findIndex(p => p._id === promotion._id);\n      setPromotions(promotions => [...promotions.slice(0, index), data, ...promotions.slice(index)]);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const editPromotion = promotion => {\n    setPromotions([...promotions.map(p => {\n      if (p._id === promotion._id) return promotion;\n      return p;\n    })]);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    direction: \"column\",\n    alignItems: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"promotions-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: getPromotions,\n    hasMore: hasMoreData,\n    initialLoad: false,\n    loader: /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      key: 'load',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    }),\n    useWindow: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PromotionTable, {\n    tasks: promotions,\n    onDelete: deletePromotions,\n    onSave: updatePromotion,\n    onDuplicate: duplicatePromotion,\n    onEdit: editPromotion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  })))));\n};","map":{"version":3,"sources":["C:/Projects/PropitTasks/‏TasksClient/src/components/promotionsList.tsx"],"names":["React","useState","useEffect","PromotionTable","InfiniteScroll","Grid","CircularProgress","Api","PromotionsList","promotions","setPromotions","initializeData","getPromotions","then","data","setPromotionsData","catch","err","console","log","page","hasMore","length","limit","setHasMoreData","excessRows","maxPage","newPromotions","slice","deletePromotions","ids","filter","_id","indexOf","updatePromotion","promotion","duplicatePromotion","index","findIndex","p","editPromotion","map","hasMoreData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,mBAArB;AAWA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAEhC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAc,EAAd,CAA5C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,cAAc;AACjB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,cAAc,GAAG,YAAY;AAC/B,UAAMC,aAAa,EAAnB;AACH,GAFD;;AAIA,QAAMA,aAAa,GAAG,YAAY;AAC9BL,IAAAA,GAAG,CAACK,aAAJ,GACKC,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChBC,MAAAA,iBAAiB;AACpB,KAHL,EAGOC,KAHP,CAGcC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KALL;AAMH,GAPD;;AASA,QAAMF,iBAAiB,GAAG,CAACD,IAAD,EAAoBM,IAApB,KAAqC;AAC3D,UAAMC,OAAgB,GAAIP,IAAI,CAACQ,MAAL,IAAeR,IAAI,CAACQ,MAAL,KAAgBC,KAAhC,GAAyC,IAAzC,GAAgD,KAAzE;AACAC,IAAAA,cAAc,CAACH,OAAD,CAAd;AACA,UAAMI,UAAU,GAAGL,IAAI,GAAGM,OAAP,GAAiBZ,IAAI,CAACQ,MAAL,GAAc,EAA/B,GAAoC,CAAvD;AACA,UAAMK,aAAa,GAAG,CAAC,GAAGlB,UAAU,CAACmB,KAAX,CAAiBH,UAAjB,CAAJ,CAAtB;AACAf,IAAAA,aAAa,CAACD,UAAU,IAAI,CAAC,GAAGkB,aAAJ,EAAmB,GAAGb,IAAtB,CAAf,CAAb;AACH,GAND;;AAQA,QAAMe,gBAAgB,GAAG,MAAOC,GAAP,IAAyB;AAC9CpB,IAAAA,aAAa,CAACD,UAAU,IAAI,CAAC,GAAGA,UAAU,CAACsB,MAAX,CAAkB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAaF,GAAG,CAACG,OAAJ,CAAYD,GAAZ,MAAqB,CAAC,CAArD,CAAJ,CAAf,CAAb;AACA,UAAMzB,GAAG,CAACsB,gBAAJ,CAAqBC,GAArB,CAAN;AACH,GAHD;;AAKA,QAAMI,eAAe,GAAG,MAAOC,SAAP,IAAgC;AACpD,UAAM5B,GAAG,CAAC2B,eAAJ,CAAoBC,SAApB,CAAN;AACH,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,MAAOD,SAAP,IAAgC;AACvD5B,IAAAA,GAAG,CAAC6B,kBAAJ,CAAuBD,SAAvB,EACKtB,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChB,YAAMuB,KAAK,GAAG5B,UAAU,CAAC6B,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACP,GAAF,KAAUG,SAAS,CAACH,GAA9C,CAAd;AACAtB,MAAAA,aAAa,CAACD,UAAU,IAAI,CACxB,GAAGA,UAAU,CAACmB,KAAX,CAAiB,CAAjB,EAAoBS,KAApB,CADqB,EAExBvB,IAFwB,EAGxB,GAAGL,UAAU,CAACmB,KAAX,CAAiBS,KAAjB,CAHqB,CAAf,CAAb;AAKH,KARL,EAQOrB,KARP,CAQcC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAVL;AAWH,GAZD;;AAcA,QAAMuB,aAAa,GAAIL,SAAD,IAAoB;AACtCzB,IAAAA,aAAa,CAAC,CAAC,GAAGD,UAAU,CAACgC,GAAX,CAAgBF,CAAD,IAAO;AACpC,UAAIA,CAAC,CAACP,GAAF,KAAUG,SAAS,CAACH,GAAxB,EAA6B,OAAOG,SAAP;AAC7B,aAAOI,CAAP;AACH,KAHiB,CAAJ,CAAD,CAAb;AAIH,GALD;;AAOA,sBACI,oBAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,SAAS,EAAC,QAHd;AAII,IAAA,UAAU,EAAC,QAJf;AAKI,IAAA,OAAO,EAAC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAE,CADf;AAEI,IAAA,QAAQ,EAAE3B,aAFd;AAGI,IAAA,OAAO,EAAE8B,WAHb;AAII,IAAA,WAAW,EAAE,KAJjB;AAKI,IAAA,MAAM,eAAE,oBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,WAAxB;AAAoC,MAAA,GAAG,EAAE,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALZ;AAMI,IAAA,SAAS,EAAE,KANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAEjC,UAAvB;AAAmC,IAAA,QAAQ,EAAEoB,gBAA7C;AACI,IAAA,MAAM,EAAEK,eADZ;AAC6B,IAAA,WAAW,EAAEE,kBAD1C;AAC8D,IAAA,MAAM,EAAEI,aADtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ,CADJ,CANJ,CADJ;AAuBH,CAnFM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PromotionTable from './promotionsTable';\nimport { promotion } from '../types/promotion';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Api from '../api/apiManager';\n\n\nexport interface TableProps {\n    tasks: any[];\n    onDelete: any;\n    onDuplicate: any;\n    onEdit: any;\n    onSave: any;\n}\n\nexport const PromotionsList = () => {\n\n    const [promotions, setPromotions] = useState<promotion[]>([]);\n\n\n    useEffect(() => {\n        initializeData();\n    }, []);\n\n    const initializeData = async () => {\n        await getPromotions();\n    }\n\n    const getPromotions = async () => {\n        Api.getPromotions()\n            .then(({ data }) => {\n                setPromotionsData();\n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    const setPromotionsData = (data: promotion[], page: number) => {\n        const hasMore: boolean = (data.length && data.length === limit) ? true : false;\n        setHasMoreData(hasMore);\n        const excessRows = page > maxPage ? data.length - 10 : 0;\n        const newPromotions = [...promotions.slice(excessRows)];\n        setPromotions(promotions => [...newPromotions, ...data]);\n    }\n\n    const deletePromotions = async (ids: string[]) => {\n        setPromotions(promotions => [...promotions.filter(({ _id }) => ids.indexOf(_id) === -1)]);\n        await Api.deletePromotions(ids);\n    }\n\n    const updatePromotion = async (promotion: promotion) => {\n        await Api.updatePromotion(promotion);\n    }\n\n    const duplicatePromotion = async (promotion: promotion) => {\n        Api.duplicatePromotion(promotion)\n            .then(({ data }) => {\n                const index = promotions.findIndex(p => p._id === promotion._id);\n                setPromotions(promotions => [\n                    ...promotions.slice(0, index),\n                    data,\n                    ...promotions.slice(index)\n                ]);\n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    const editPromotion = (promotion: any) => {\n        setPromotions([...promotions.map((p) => {\n            if (p._id === promotion._id) return promotion\n            return p;\n        })])\n    }\n\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\">\n            <Grid item xs={10}>\n                <div className=\"promotions-list\">\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={getPromotions}\n                        hasMore={hasMoreData}\n                        initialLoad={false}\n                        loader={<CircularProgress color=\"secondary\" key={'load'} />}\n                        useWindow={false}>\n                        <PromotionTable tasks={promotions} onDelete={deletePromotions}\n                            onSave={updatePromotion} onDuplicate={duplicatePromotion} onEdit={editPromotion} />\n                    </InfiniteScroll>\n                </div>\n            </Grid>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}