{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\PropitTasks\\\\\\u200FTasksClient\\\\src\\\\components\\\\tasksTable.tsx\";\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Table, TableContainer, TableBody, TableHead, TableCell, withStyles, TextField } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneTwoToneIcon from '@material-ui/icons/DoneTwoTone';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst TasksTableHead = () => {\n  return /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(StyledTableCell, {\n    key: \"userName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, \"User name\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    key: \"phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, \"Phone number\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    key: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    key: \"createDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"Create date\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Actions\")));\n};\n\nconst StyledTableCell = withStyles(theme => createStyles({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    textTransform: \"capitalize\"\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: '100%',\n    alignItems: 'center',\n    marginTop: theme.spacing(3)\n  },\n  paper: {\n    width: '100%',\n    minWidth: 750,\n    overflowX: 'auto',\n    marginBottom: theme.spacing(2)\n  },\n  table: {\n    minWidth: 750\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  }\n}));\nconst useTextStyles = makeStyles(theme => ({\n  disabledInput: {\n    color: theme.palette.text.primary\n  },\n  input: {\n    color: theme.palette.text.primary\n  }\n}));\n\nconst TasksTable = props => {\n  const classes = useStyles();\n  const textClasses = useTextStyles();\n  const [editableTaskId, setEditableTaskId] = React.useState();\n  const {\n    tasks\n  } = props;\n  const taskKeys = ['userName', 'phone', 'email', 'createDate'];\n\n  const deleteTask = data => {\n    props.onDelete([data._id]);\n  };\n\n  const saveTask = () => {\n    const id = editableTaskId || '';\n    const task = tasks.find(t => t._id == id);\n    props.onSave(task);\n    setEditableTaskId('');\n  };\n\n  const editTask = (value, key, row) => {\n    row[key] = value;\n    props.onEdit(row);\n  };\n\n  const setRowEditable = data => {\n    setEditableTaskId(data._id);\n  };\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  const isEditable = id => editableTaskId === id || id == '';\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-labelledby\": \"tableTitle\",\n    size: \"small\",\n    \"aria-label\": \"enhanced table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TasksTableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, tasks.map((row, index) => {\n    const isDisable = !isEditable(row._id);\n    const rowId = `row-${index}`;\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      key: rowId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 37\n      }\n    }, taskKeys.map((key, i) => /*#__PURE__*/React.createElement(TableCell, {\n      key: `row-${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 46\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      onChange: e => editTask(e.target.value, key, row),\n      value: row[key],\n      disabled: isDisable,\n      InputProps: {\n        disableUnderline: isDisable,\n        classes: {\n          disabled: textClasses.disabledInput\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 49\n      }\n    }))), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(DeleteIcon, {\n      onClick: e => deleteTask(row),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 45\n      }\n    }), isDisable ? /*#__PURE__*/React.createElement(EditIcon, {\n      onClick: e => setRowEditable(row),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 62\n      }\n    }) : /*#__PURE__*/React.createElement(DoneTwoToneIcon, {\n      onClick: saveTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 53\n      }\n    })));\n  }))))));\n};\n\nexport default TasksTable;","map":{"version":3,"sources":["C:/Projects/PropitTasks/‚ÄèTasksClient/src/components/tasksTable.tsx"],"names":["React","createStyles","makeStyles","TableRow","Paper","Table","TableContainer","TableBody","TableHead","TableCell","withStyles","TextField","DeleteIcon","DoneTwoToneIcon","EditIcon","TasksTableHead","StyledTableCell","theme","head","backgroundColor","palette","primary","main","color","common","white","textTransform","body","fontSize","useStyles","root","width","alignItems","marginTop","spacing","paper","minWidth","overflowX","marginBottom","table","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","useTextStyles","disabledInput","text","input","TasksTable","props","classes","textClasses","editableTaskId","setEditableTaskId","useState","tasks","taskKeys","deleteTask","data","onDelete","_id","saveTask","id","task","find","t","onSave","editTask","value","key","row","onEdit","setRowEditable","isSelected","selected","indexOf","isEditable","map","index","isDisable","rowId","i","e","target","disableUnderline","disabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Table, TableContainer, TableBody, TableHead, TableCell, withStyles, TextField } from '@material-ui/core';\nimport { TableProps } from './tasksList';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneTwoToneIcon from '@material-ui/icons/DoneTwoTone';\nimport EditIcon from '@material-ui/icons/Edit';\n\n\nconst TasksTableHead = () => {\n    return (\n        <TableHead>\n            <TableRow>\n                <StyledTableCell>\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"userName\">\n                    User name\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"phone\">\n                    Phone number\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"email\">\n                    Email\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"createDate\">\n                    Create date\n                </StyledTableCell>\n                <StyledTableCell>\n                    Actions\n                </StyledTableCell>\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        head: {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white,\n            textTransform: \"capitalize\"\n        },\n        body: {\n            fontSize: 14,\n        },\n    }),\n)(TableCell);\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            alignItems: 'center',\n            marginTop: theme.spacing(3)\n        },\n        paper: {\n            width: '100%',\n            minWidth: 750,\n            overflowX: 'auto',\n            marginBottom: theme.spacing(2)\n        },\n        table: {\n            minWidth: 750,\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\nconst useTextStyles = makeStyles(theme => ({\n    disabledInput: {\n        color: theme.palette.text.primary,\n    },\n    input: {\n        color: theme.palette.text.primary,\n    }\n}));\n\nconst TasksTable = (props: TableProps) => {\n\n    const classes = useStyles();\n    const textClasses = useTextStyles();\n    const [editableTaskId, setEditableTaskId] = React.useState<string>();\n    const { tasks } = props;\n    const taskKeys = ['userName', 'phone', 'email', 'createDate'];\n\n    const deleteTask = (data: any) => {\n        props.onDelete([data._id]);\n    }\n\n    const saveTask = () => {\n        const id = editableTaskId || '';\n        const task = tasks.find((t) => t._id == id);\n        props.onSave(task);\n        setEditableTaskId('');\n    }\n\n    const editTask = (value: string, key: string, row: any) => {\n        row[key] = value;\n        props.onEdit(row);\n    }\n\n    const setRowEditable = (data: any) => {\n        setEditableTaskId(data._id);\n    }\n\n    const isSelected = (id: string) => selected.indexOf(id) !== -1;\n    const isEditable = (id: string) => editableTaskId === id || id == '';\n\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper} >\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size=\"small\"\n                        aria-label=\"enhanced table\">\n                        <TasksTableHead />\n                        <TableBody>\n                            {tasks.map((row, index) => {\n                                const isDisable = !isEditable(row._id);\n                                const rowId = `row-${index}`;\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        key={rowId}\n                                    >\n                                        {taskKeys.map((key, i) =>\n                                            (<TableCell key={`row-${i}`}>\n                                                <TextField onChange={e => editTask(e.target.value, key, row)} value={row[key]} disabled={isDisable} InputProps={{\n                                                    disableUnderline: isDisable,\n                                                    classes: { disabled: textClasses.disabledInput }\n                                                }} />\n                                            </TableCell>\n                                            ))}\n                                        <TableCell>\n                                            <DeleteIcon onClick={e => deleteTask(row)}></DeleteIcon>{\n                                                isDisable ? (<EditIcon onClick={e => setRowEditable(row)}></EditIcon>) : (\n                                                    <DoneTwoToneIcon onClick={saveTask}></DoneTwoToneIcon>)}\n                                        </TableCell>\n                                    </TableRow>);\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        </div >);\n}\n\nexport default TasksTable;"]},"metadata":{},"sourceType":"module"}