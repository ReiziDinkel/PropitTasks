{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\PropitTasks\\\\\\u200FTasksClient\\\\src\\\\components\\\\tasksList.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport PromotionTable from './tasksTable';\nimport { Grid, Button } from '@material-ui/core';\nimport * as TaskApi from '../services/TaskService';\nexport const PromotionsList = () => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    initializeData();\n  }, []);\n\n  const initializeData = async () => {\n    await getPromotions();\n  };\n\n  const getPromotions = async () => {\n    TaskApi.getPromotions().then(({\n      data\n    }) => {\n      setTasks(promotions => [...data]);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const deletePromotions = async ids => {\n    setTasks(promotions => [...promotions.filter(({\n      _id\n    }) => ids.indexOf(_id) === -1)]);\n    await TaskApi.deletePromotions(ids);\n  };\n\n  const updatePromotion = async promotion => {\n    await TaskApi.updatePromotion(promotion);\n  };\n\n  const duplicatePromotion = async promotion => {\n    TaskApi.duplicatePromotion(promotion).then(({\n      data\n    }) => {\n      const index = tasks.findIndex(p => p._id === promotion._id);\n      setTasks(promotions => [...promotions.slice(0, index), data, ...promotions.slice(index)]);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const editTask = promotion => {\n    setTasks([...tasks.map(p => {\n      if (p._id === promotion._id) return promotion;\n      return p;\n    })]);\n  };\n\n  const create = promotion => {\n    const newTask = {\n      _id: '',\n      createDate: '',\n      email: '',\n      phone: '',\n      userName: ''\n    };\n    setTasks(promotions => [newTask, ...promotions]);\n    ;\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    direction: \"column\",\n    alignItems: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"promotions-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: create,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Create task\"), /*#__PURE__*/React.createElement(PromotionTable, {\n    tasks: tasks,\n    onDelete: deletePromotions,\n    onSave: updatePromotion,\n    onDuplicate: duplicatePromotion,\n    onEdit: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }))));\n};","map":{"version":3,"sources":["C:/Projects/PropitTasks/‏TasksClient/src/components/tasksList.tsx"],"names":["React","useState","useEffect","PromotionTable","Grid","Button","TaskApi","PromotionsList","tasks","setTasks","initializeData","getPromotions","then","data","promotions","catch","err","console","log","deletePromotions","ids","filter","_id","indexOf","updatePromotion","promotion","duplicatePromotion","index","findIndex","p","slice","editTask","map","create","newTask","createDate","email","phone","userName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PromotionTable from './tasksTable';\nimport { task } from '../types/task';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Button } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as TaskApi from '../services/TaskService';\n\n\nexport interface TableProps {\n    tasks: any[];\n    onDelete: any;\n    onDuplicate: any;\n    onEdit: any;\n    onSave: any;\n}\n\nexport const PromotionsList = () => {\n\n    const [tasks, setTasks] = useState<task[]>([]);\n\n\n    useEffect(() => {\n        initializeData();\n    }, []);\n\n    const initializeData = async () => {\n        await getPromotions();\n    }\n\n    const getPromotions = async () => {\n        TaskApi.getPromotions()\n            .then(({ data }) => {\n                setTasks(promotions => [...data]);\n\n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    const deletePromotions = async (ids: string[]) => {\n        setTasks(promotions => [...promotions.filter(({ _id }) => ids.indexOf(_id) === -1)]);\n        await TaskApi.deletePromotions(ids);\n    }\n\n    const updatePromotion = async (promotion: task) => {\n        await TaskApi.updatePromotion(promotion);\n    }\n\n    const duplicatePromotion = async (promotion: task) => {\n        TaskApi.duplicatePromotion(promotion)\n            .then(({ data }) => {\n                const index = tasks.findIndex(p => p._id === promotion._id);\n                setTasks(promotions => [\n                    ...promotions.slice(0, index),\n                    data,\n                    ...promotions.slice(index)\n                ]);\n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    const editTask = (promotion: any) => {\n        setTasks([...tasks.map((p) => {\n            if (p._id === promotion._id) return promotion\n            return p;\n        })])\n    }\n\n    const create = (promotion: any) => {\n        const newTask = { _id: '', createDate: '', email: '', phone: '', userName: '' };\n        setTasks(promotions => [\n            newTask,\n            ...promotions\n        ]);;\n    }\n\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\">\n            <Grid item xs={10}>\n                <div className=\"promotions-list\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={create}>\n                        Create task\n            </Button>\n                    <PromotionTable tasks={tasks} onDelete={deletePromotions}\n                        onSave={updatePromotion} onDuplicate={duplicatePromotion} onEdit={editTask} />\n                </div>\n            </Grid>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}